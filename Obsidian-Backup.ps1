<#
.SYNOPSIS
Script de compression utilisant 7zip pour cr√©er une archive √† partir de plusieurs dossiers.
Il 


.DESCRIPTION
Ce script PowerShell utilise l'outil 7zip pour compresser les contenus de plusieurs dossiers
dans une archive au format 7z. L'archive porte un nom bas√© sur la date de cr√©ation du script.

.PARAMETER FolderPaths
Les chemins vers les dossiers √† compresser.

.EXAMPLE
.\archive-obsidian.ps1 -FolderPaths @("C:\Chemin\Vers\DossierA", "C:\Chemin\Vers\DossierB")

.NOTES
Auteur : St√©phane Lopez avec l'aide de chatGPT
Date de cr√©ation : 2023-08/28
Date de maj : 2024-05
Version : 2.0
#>

### Param√©trages obligatoires ###
# Chemins vers les dossiers que √† compresser
$folderPaths = @("C:\Users\s.lopez\OneDrive\90-Documents - stephane@simplixite.fr\Obsidian-Test-Vault\Test de Vault")

# Chemin vers le dossier contenant les archives
$archiveFolder = "C:\Temp\backup\"

### Param√©trages facultatifs ### 
# Chemin vers l'ex√©cutable 7zip dans le path (ou manuellement) 
$7zipPath = (Get-Command 7z.exe).source  # $7zipPath = "C:\path\to\7z.exe"

# Nom des archives g√©n√©r√©s
$archiveDate = Get-Date -Format "yyyy-MM-dd"
$archiveName = "Obsidian-Backup-$archiveDate.7z"

# V√©rification de l'archive g√©n√©r√© (ou pas) 
$verif = $true

# Nombre d'archives √† conserver
$archivesToKeep = 3

# Log des op√©rations
$log = $true
$folderLog = "C:\Users\s.lopez\Documents\Partage-Obsidian\ZZZ-Test\Backup\"
$logNote = "Obsidian-backup-log.md"
$logLastBackupFile = "LastBackupLog.md"

# Concat√©nation des chemins 
$logPathTasks = $folderLog+ $logNote                    # Log regroup√© pour le suivi dans Obsidian
$lastBackupLogFile = $folderLog+$logLastBackupFile      # Log du dernier job d'archivage pour savoir ce qui c'est pass√© en cas de souci
$archivePath = $archiveFolder + $archiveName            # Chemin complet vers l'emplacement o√π l'archive sera cr√©√©e

### Compresser les dossiers dans une archive au format 7z
$logLastBackup = & $7zipPath a -t7z $archivePath $folderPaths  

if ($?  ){
    $logstring = "- [x] ü§ñ [[$archiveDate]] - Backup de [$archiveName](file:\\$archivePath) üÜó|[[$logLastBackupFile|üóíÔ∏è]]"
}else{
    $logstring = "- [-] ü§ñ [[$archiveDate]] - Backup de [$archiveName](file:\\$archivePath) ‚ùå|[[$logLastBackupFile|üóíÔ∏è]]"
}


### Verification de l'archive cr√©√©
if ($verif){
    & $7zipPath t $archivePath
    if ($?){
        $logstring += " | V√©rification üÜó"
    }else{
        $logstring += " | V√©rification ‚ùå"
    }
}

Write-Host $logLastBackup
Write-Host "Archive cr√©√©e : $archivePath"
Write-Host $logstring



### Suppression des anciennes archives
# Liste toutes les archives dans le dossier d'archive
$archives = Get-ChildItem -Path $archiveFolder -Filter $archiveBaseName"*.7z" | Sort-Object LastWriteTime -Descending

# V√©rifie s'il y a plus d'archives que celles √† conserver
if ($archives.Count -gt $archivesToKeep) {
    # Calcule le nombre d'archives √† supprimer
    $archivesToDelete = $archives.Count - $archivesToKeep

    # Supprime les archives exc√©dentaires
    for ($i = 0; $i -lt $archivesToDelete; $i++) {
        $archiveToDelete = $archives[$archivesToKeep + $i]
        Remove-Item -Path $archiveToDelete.FullName -Force
        Write-Host "Archive supprim√©e : $($archiveToDelete.Name)"
        $logLastBackup += "Archive supprim√©e : $($archiveToDelete.Name)"

    }

    $logstring += "suppression de $i / $($archives.Count)  ‚úÖ $archiveDate `n"

} else {
    $logstring += "| suppression de 0 / $($archives.Count)  ‚úÖ $archiveDate `n"
    Write-Host "Nombre d'archives insuffisant. Aucune suppression n√©cessaire."
}

if ($log){
    Add-Content -Path $logPathTasks -Value $logstring
    Add-Content -Path $lastBackupLogFile -Value $logLastBackup
}
